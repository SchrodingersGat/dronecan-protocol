// dc_pkt_block.h was generated by ProtoGen version 2.3.b

/*
 * This program source code file is part of DroneCAN protocol specification
 *
 * Website: www.dronecan.org
 * GitHub: www.github.com/dronecan
 *
 * Copyright (C) 2017 Currawong Engineering Pty Ltd, see AUTHORS.txt for contributors.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, you may find one here:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * or you may search the http://www.gnu.org website for the version 2 license,
 * or you may write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

#ifndef _DC_PKT_BLOCK_H
#define _DC_PKT_BLOCK_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

#include "DC_BlockProtocol.h"

typedef struct
{
    uint8_t  id;       //!< Transfer ID
    uint8_t  endpoint; //!< Transfer endpoint
    uint32_t address;  //!< Transfer address
    uint16_t size;     //!< Transfer size (bytes)
}DC_Block_StartBlockTransfer_t;

//! Create the DC_Block_StartBlockTransfer packet
void encodeDC_Block_StartBlockTransferPacketStructure(DC_Packet_t* pkt, const DC_Block_StartBlockTransfer_t* user);

//! Decode the DC_Block_StartBlockTransfer packet
int decodeDC_Block_StartBlockTransferPacketStructure(const DC_Packet_t* pkt, DC_Block_StartBlockTransfer_t* user);

//! return the packet ID for the DC_Block_StartBlockTransfer packet
#define getDC_Block_StartBlockTransferPacketID() (DC_PKT_BLOCK_START)

//! return the minimum encoded length for the DC_Block_StartBlockTransfer packet
#define getDC_Block_StartBlockTransferMinDataLength() (8)

//! return the maximum encoded length for the DC_Block_StartBlockTransfer packet
#define getDC_Block_StartBlockTransferMaxDataLength() (8)

#ifdef __cplusplus
}
#endif
#endif
