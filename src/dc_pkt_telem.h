// dc_pkt_telem.h was generated by ProtoGen version 2.3.b

/*
 * This program source code file is part of DroneCAN protocol specification
 *
 * Website: www.dronecan.org
 * GitHub: www.github.com/dronecan
 *
 * Copyright (C) 2017 Currawong Engineering Pty Ltd, see AUTHORS.txt for contributors.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, you may find one here:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * or you may search the http://www.gnu.org website for the version 2 license,
 * or you may write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

#ifndef _DC_PKT_TELEM_H
#define _DC_PKT_TELEM_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

#include "DC_TelemetryProtocol.h"

typedef struct
{
    unsigned mode : 4;     //!< Device mode
    unsigned warning : 1;  //!< Device warning
    unsigned error : 1;    //!< Device error
    unsigned critical : 1; //!< Device critical
    unsigned fatal : 1;    //!< Device fatal
}DC_Telemetry_DeviceStatusField_t;

//! return the minimum encoded length for the DC_Telemetry_DeviceStatusField_t structure
#define getMinLengthOfDC_Telemetry_DeviceStatusField_t() (1)

//! Encode a DC_Telemetry_DeviceStatusField_t structure into a byte array
void encodeDC_Telemetry_DeviceStatusField_t(uint8_t* data, int* bytecount, const DC_Telemetry_DeviceStatusField_t* user);

//! Decode a DC_Telemetry_DeviceStatusField_t structure from a byte array
int decodeDC_Telemetry_DeviceStatusField_t(const uint8_t* data, int* bytecount, DC_Telemetry_DeviceStatusField_t* user);

/*!
 * Device status
 */
typedef struct
{
    DC_Telemetry_DeviceStatusField_t status; //!< Device status information
    uint32_t                         uptime; //!< Device uptime (s)
}DC_Telemetry_DeviceStatus_t;

//! Create the DC_Telemetry_DeviceStatus packet
void encodeDC_Telemetry_DeviceStatusPacketStructure(DC_Packet_t* pkt, const DC_Telemetry_DeviceStatus_t* user);

//! Decode the DC_Telemetry_DeviceStatus packet
int decodeDC_Telemetry_DeviceStatusPacketStructure(const DC_Packet_t* pkt, DC_Telemetry_DeviceStatus_t* user);

//! return the packet ID for the DC_Telemetry_DeviceStatus packet
#define getDC_Telemetry_DeviceStatusPacketID() (DC_PKT_TELEM_STATUS)

//! return the minimum encoded length for the DC_Telemetry_DeviceStatus packet
#define getDC_Telemetry_DeviceStatusMinDataLength() (5)

//! return the maximum encoded length for the DC_Telemetry_DeviceStatus packet
#define getDC_Telemetry_DeviceStatusMaxDataLength() (5)

#ifdef __cplusplus
}
#endif
#endif
