// dc_pkt_sys.h was generated by ProtoGen version 2.2.d

#ifndef _DC_PKT_SYS_H
#define _DC_PKT_SYS_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 *
 * Device Identification packet, uniquely identifies a particular device
 */

#include "DC_SystemProtocol.h"
#include "dc_dev_info.h"

/*!
 * Device Identification packet, uniquely identifies a particular device
 */
typedef struct
{
    DC_Sys_UID_t uid;
}DC_Sys_DeviceId_t;

#define getMinLengthOfDC_Sys_DeviceId_t() (7)

//! Create the DC_Sys_DeviceId packet
void encodeDC_Sys_DeviceIdPacketStructure(DC_Packet_t* pkt, const DC_Sys_DeviceId_t* user);

//! Decode the DC_Sys_DeviceId packet
int decodeDC_Sys_DeviceIdPacketStructure(const DC_Packet_t* pkt, DC_Sys_DeviceId_t* user);

//! Create the DC_Sys_DeviceId packet
void encodeDC_Sys_DeviceIdPacket(DC_Packet_t* pkt, const DC_Sys_UID_t* uid);

//! Decode the DC_Sys_DeviceId packet
int decodeDC_Sys_DeviceIdPacket(const DC_Packet_t* pkt, DC_Sys_UID_t* uid);

//! return the packet ID for the DC_Sys_DeviceId packet
#define getDC_Sys_DeviceIdPacketID() (DC_PKT_SYS_ID)

//! return the minimum data length for the DC_Sys_DeviceId packet
#define getDC_Sys_DeviceIdMinDataLength() (7)

//! return the maximum data length for the DC_Sys_DeviceId packet
#define getDC_Sys_DeviceIdMaxDataLength() (7)

/*!
 * Device firmware version
 */
typedef struct
{
    uint8_t  versionMajor; //!< Major release number
    uint8_t  versionMinor; //!< Minor release number
    uint8_t  versionSub;   //!< Sub release number
    uint32_t checksum;     //!< Firmware checksum
}DC_Sys_FirmwareInfo_t;

#define getMinLengthOfDC_Sys_FirmwareInfo_t() (8)

//! Create the DC_Sys_FirmwareInfo packet
void encodeDC_Sys_FirmwareInfoPacketStructure(DC_Packet_t* pkt, const DC_Sys_FirmwareInfo_t* user);

//! Decode the DC_Sys_FirmwareInfo packet
int decodeDC_Sys_FirmwareInfoPacketStructure(const DC_Packet_t* pkt, DC_Sys_FirmwareInfo_t* user);

//! Create the DC_Sys_FirmwareInfo packet
void encodeDC_Sys_FirmwareInfoPacket(DC_Packet_t* pkt, uint8_t versionMajor, uint8_t versionMinor, uint8_t versionSub, uint32_t checksum);

//! Decode the DC_Sys_FirmwareInfo packet
int decodeDC_Sys_FirmwareInfoPacket(const DC_Packet_t* pkt, uint8_t* versionMajor, uint8_t* versionMinor, uint8_t* versionSub, uint32_t* checksum);

//! return the packet ID for the DC_Sys_FirmwareInfo packet
#define getDC_Sys_FirmwareInfoPacketID() (DC_PKT_SYS_FW_VERSION)

//! return the minimum data length for the DC_Sys_FirmwareInfo packet
#define getDC_Sys_FirmwareInfoMinDataLength() (8)

//! return the maximum data length for the DC_Sys_FirmwareInfo packet
#define getDC_Sys_FirmwareInfoMaxDataLength() (8)

/*!
 * Firmware release date
 */
typedef struct
{
    uint16_t versionYear;  //!< Release date: year
    uint8_t  versionMonth; //!< Release date: month
    uint8_t  versionDay;   //!< Release date: day
}DC_Sys_RevisionDate_t;

#define getMinLengthOfDC_Sys_RevisionDate_t() (4)

//! Create the DC_Sys_RevisionDate packet
void encodeDC_Sys_RevisionDatePacketStructure(DC_Packet_t* pkt, const DC_Sys_RevisionDate_t* user);

//! Decode the DC_Sys_RevisionDate packet
int decodeDC_Sys_RevisionDatePacketStructure(const DC_Packet_t* pkt, DC_Sys_RevisionDate_t* user);

//! return the packet ID for the DC_Sys_RevisionDate packet
#define getDC_Sys_RevisionDatePacketID() (DC_PKT_SYS_FW_DATE)

//! return the minimum data length for the DC_Sys_RevisionDate packet
#define getDC_Sys_RevisionDateMinDataLength() (4)

//! return the maximum data length for the DC_Sys_RevisionDate packet
#define getDC_Sys_RevisionDateMaxDataLength() (4)

/*!
 * Processor information
 */
typedef struct
{
    uint8_t  cpuOccupancy; //!< Current CPU occupancy
    uint8_t  cpuWatermark; //!< Maximum CPU occupancy
    uint16_t resetCode;    //!< Cause of most recent power cycle event (implementation specific)
    uint16_t powerCycles;  //!< Number of logged power cycles
}DC_Sys_CPUInfo_t;

#define getMinLengthOfDC_Sys_CPUInfo_t() (6)

//! Create the DC_Sys_CPUInfo packet
void encodeDC_Sys_CPUInfoPacketStructure(DC_Packet_t* pkt, const DC_Sys_CPUInfo_t* user);

//! Decode the DC_Sys_CPUInfo packet
int decodeDC_Sys_CPUInfoPacketStructure(const DC_Packet_t* pkt, DC_Sys_CPUInfo_t* user);

//! return the packet ID for the DC_Sys_CPUInfo packet
#define getDC_Sys_CPUInfoPacketID() (DC_PKT_SYS_CPU_INFO)

//! return the minimum data length for the DC_Sys_CPUInfo packet
#define getDC_Sys_CPUInfoMinDataLength() (6)

//! return the maximum data length for the DC_Sys_CPUInfo packet
#define getDC_Sys_CPUInfoMaxDataLength() (6)

typedef struct
{
    uint16_t command;    //!< System command (device specific)
    uint8_t  payload[6];
}DC_Sys_SystemCommand_t;

#define getMinLengthOfDC_Sys_SystemCommand_t() (8)

//! Create the DC_Sys_SystemCommand packet
void encodeDC_Sys_SystemCommandPacket(DC_Packet_t* pkt, uint16_t command, const uint8_t payload[6]);

//! Decode the DC_Sys_SystemCommand packet
int decodeDC_Sys_SystemCommandPacket(const DC_Packet_t* pkt, uint16_t* command, uint8_t payload[6]);

//! return the packet ID for the DC_Sys_SystemCommand packet
#define getDC_Sys_SystemCommandPacketID() (DC_PKT_SYS_CMD)

//! return the minimum data length for the DC_Sys_SystemCommand packet
#define getDC_Sys_SystemCommandMinDataLength() (8)

//! return the maximum data length for the DC_Sys_SystemCommand packet
#define getDC_Sys_SystemCommandMaxDataLength() (8)

typedef struct
{
    DC_Sys_UID_t uid;   
    uint8_t      nodeID;
}DC_Sys_AssignNodeID_t;

#define getMinLengthOfDC_Sys_AssignNodeID_t() (8)

//! Create the DC_Sys_AssignNodeID packet
void encodeDC_Sys_AssignNodeIDPacketStructure(DC_Packet_t* pkt, const DC_Sys_AssignNodeID_t* user);

//! Decode the DC_Sys_AssignNodeID packet
int decodeDC_Sys_AssignNodeIDPacketStructure(const DC_Packet_t* pkt, DC_Sys_AssignNodeID_t* user);

//! return the packet ID for the DC_Sys_AssignNodeID packet
#define getDC_Sys_AssignNodeIDPacketID() (DC_PKT_SYS_ASSIGN_NODE_ID)

//! return the minimum data length for the DC_Sys_AssignNodeID packet
#define getDC_Sys_AssignNodeIDMinDataLength() (8)

//! return the maximum data length for the DC_Sys_AssignNodeID packet
#define getDC_Sys_AssignNodeIDMaxDataLength() (8)

#ifdef __cplusplus
}
#endif
#endif
