// DroneCAN_SystemPackets.h was generated by ProtoGen version 2.18.c

/**

Copyright (c) 2020 DroneCAN

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

**/

#ifndef _DRONECAN_SYSTEMPACKETS_H
#define _DRONECAN_SYSTEMPACKETS_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

#include "DroneCANProtocol.h"

/*!
 * Unique identifier for DroneCAN device
 */
typedef struct
{
    uint16_t vid;     //!< Vendor ID
    uint16_t pid;     //!< Product ID
    uint32_t seiral;  //!< Device serial number
    uint8_t  address; //!< CAN node address
}DroneCAN_UniqueId_t;

//! Create the DroneCAN_UniqueId packet
void encodeDroneCAN_UniqueIdPacketStructure(void* pkt, const DroneCAN_UniqueId_t* user);

//! Decode the DroneCAN_UniqueId packet
int decodeDroneCAN_UniqueIdPacketStructure(const void* pkt, DroneCAN_UniqueId_t* user);

//! return the packet ID for the DroneCAN_UniqueId packet
#define getDroneCAN_UniqueIdPacketID() (PKT_DC_SYSTEM_UID)

//! return the minimum encoded length for the DroneCAN_UniqueId packet
#define getDroneCAN_UniqueIdMinDataLength() (8)

//! return the maximum encoded length for the DroneCAN_UniqueId packet
#define getDroneCAN_UniqueIdMaxDataLength() (8)

typedef struct
{
    uint8_t  versionMajor;
    uint8_t  versionMinor;
    uint8_t  versionSub;  
    uint32_t checksum;    
}DroneCAN_FirwareVersion_t;

//! Create the DroneCAN_FirwareVersion packet
void encodeDroneCAN_FirwareVersionPacketStructure(void* pkt, const DroneCAN_FirwareVersion_t* user);

//! Decode the DroneCAN_FirwareVersion packet
int decodeDroneCAN_FirwareVersionPacketStructure(const void* pkt, DroneCAN_FirwareVersion_t* user);

//! return the packet ID for the DroneCAN_FirwareVersion packet
#define getDroneCAN_FirwareVersionPacketID() (PKT_DC_SYSTEM_FW_VERSION)

//! return the minimum encoded length for the DroneCAN_FirwareVersion packet
#define getDroneCAN_FirwareVersionMinDataLength() (7)

//! return the maximum encoded length for the DroneCAN_FirwareVersion packet
#define getDroneCAN_FirwareVersionMaxDataLength() (7)

typedef struct
{
    uint16_t versionYear; 
    uint8_t  versionMonth;
    uint8_t  versionDay;  
}DroneCAN_FirmwareDate_t;

//! Create the DroneCAN_FirmwareDate packet
void encodeDroneCAN_FirmwareDatePacketStructure(void* pkt, const DroneCAN_FirmwareDate_t* user);

//! Decode the DroneCAN_FirmwareDate packet
int decodeDroneCAN_FirmwareDatePacketStructure(const void* pkt, DroneCAN_FirmwareDate_t* user);

//! return the packet ID for the DroneCAN_FirmwareDate packet
#define getDroneCAN_FirmwareDatePacketID() (PKT_DC_SYSTEM_FW_DATE)

//! return the minimum encoded length for the DroneCAN_FirmwareDate packet
#define getDroneCAN_FirmwareDateMinDataLength() (4)

//! return the maximum encoded length for the DroneCAN_FirmwareDate packet
#define getDroneCAN_FirmwareDateMaxDataLength() (4)

//! Create the DroneCAN_HardwareInfo packet
void encodeDroneCAN_HardwareInfoPacket(void* pkt);

//! Decode the DroneCAN_HardwareInfo packet
int decodeDroneCAN_HardwareInfoPacket(const void* pkt);

//! return the packet ID for the DroneCAN_HardwareInfo packet
#define getDroneCAN_HardwareInfoPacketID() (PKT_DC_SYSTEM_HW_INFO)

//! return the minimum encoded length for the DroneCAN_HardwareInfo packet
#define getDroneCAN_HardwareInfoMinDataLength() 0

//! return the maximum encoded length for the DroneCAN_HardwareInfo packet
#define getDroneCAN_HardwareInfoMaxDataLength() 0

#ifdef __cplusplus
}
#endif
#endif
