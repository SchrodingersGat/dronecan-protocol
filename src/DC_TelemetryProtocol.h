// DC_TelemetryProtocol.h was generated by ProtoGen version 2.2.d

#ifndef _DC_TELEMETRYPROTOCOL_H
#define _DC_TELEMETRYPROTOCOL_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 * \mainpage DC_Telemetry protocol stack
 *

 *
 * The protocol API enumeration is incremented anytime the protocol is changed
 * in a way that affects compatibility with earlier versions of the protocol.
 * The protocol enumeration for this version is: 1
 *
 * The protocol version is 1.0
 */

#include <stdint.h>
#include "drone_can_protocol_glue.h"	// Protocol glue files

//! \return the protocol API enumeration
#define getDC_TelemetryApi() 1

//! \return the protocol version string
#define getDC_TelemetryVersion() "1.0"
typedef enum
{
    DC_PKT_TELEM_STATUS = 0x00,//!< Device status information
    DC_PKT_TELEM_WARNING,    //!< Device specific warning codes
    DC_PKT_TELEM_ERRORS      //!< Device specific error codes
} DroneCAN_TelemetryMessages;

typedef enum
{
    DC_DEV_STATUS_OK = 0x00, 
    DC_DEV_STATUS_WARN,      
    DC_DEV_STATUS_ERR,       
    DC_DEV_STATUS_CRIT       
} DroneCAN_DeviceStatus;

typedef enum
{
    DC_DEV_MODE_NORMAL = 0x00,
    DC_DEV_MODE_STANDBY,     //!< Device is disarmed
    DC_DEV_MODE_INIT,        //!< Device is in initialization routine
    DC_DEV_MODE_PREFLIGHT,   //!< Device is performing preflight checks
    DC_DEV_MODE_CALIBRATE,   //!< Device is in calibration mode
    DC_DEV_MODE_UPDATE,      //!< Device is performing firmware update
    DC_DEV_MODE_SHUTDOWN     //!< Device is in shutdown mode
} DroneCAN_DeviceMode;


// The prototypes below provide an interface to the packets.
// They are not auto-generated functions, but must be hand-written

//! \return the packet data pointer from the packet
uint8_t* getDC_TelemetryPacketData(DC_Packet_t* pkt);

//! \return the packet data pointer from the packet, const
const uint8_t* getDC_TelemetryPacketDataConst(const DC_Packet_t* pkt);

//! Complete a packet after the data have been encoded
void finishDC_TelemetryPacket(DC_Packet_t* pkt, int size, uint32_t packetID);

//! \return the size of a packet from the packet header
int getDC_TelemetryPacketSize(const DC_Packet_t* pkt);

//! \return the ID of a packet from the packet header
uint32_t getDC_TelemetryPacketID(const DC_Packet_t* pkt);

#ifdef __cplusplus
}
#endif
#endif
