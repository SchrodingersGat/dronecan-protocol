// DC_BlockProtocol.h was generated by ProtoGen version 2.2.d

#ifndef _DC_BLOCKPROTOCOL_H
#define _DC_BLOCKPROTOCOL_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 * \mainpage DC_Block protocol stack
 *

 *
 * The protocol API enumeration is incremented anytime the protocol is changed
 * in a way that affects compatibility with earlier versions of the protocol.
 * The protocol enumeration for this version is: 1
 *
 * The protocol version is 1.0
 */

#include <stdint.h>
#include "drone_can_packet.h"	// DroneCAN packet definition

//! \return the protocol API enumeration
#define getDC_BlockApi() 1

//! \return the protocol version string
#define getDC_BlockVersion() "1.0"
/*!
 * Block data endpoints
 */
typedef enum
{
    DC_BLOCK_ENDPOINT_MULTI_FRAME = 0x00,//!< Multi-frame message transfer
    DC_BLOCK_ENDPOINT_BOOTLOADER = 0x10, //!< Bootloader data
    DC_BLOCK_ENDPOINT_INVALID = 0xFF     //!< Invalid enpoint. Do not define endpoint ID values higher than this
} DroneCAN_BlockDataEndpoints;

//! \return the label of a 'DroneCAN_BlockDataEndpoints' enum entry, based on its value
const char* DroneCAN_BlockDataEndpoints_EnumLabel(int value);

/*!
 * Block data messages
 */
typedef enum
{
    DC_PKT_BLOCK_DATA_0 = 0x00,      //!< Block data transfer, offset 0
    DC_PKT_BLOCK_DATA_1,             //!< Block data transfer, offset 1
    DC_PKT_BLOCK_DATA_2,             //!< Block data transfer, offset 2
    DC_PKT_BLOCK_DATA_3,             //!< Block data transfer, offset 3
    DC_PKT_BLOCK_DATA_4,             //!< Block data transfer, offset 4
    DC_PKT_BLOCK_DATA_5,             //!< Block data transfer, offset 5
    DC_PKT_BLOCK_DATA_6,             //!< Block data transfer, offset 6
    DC_PKT_BLOCK_DATA_7,             //!< Block data transfer, offset 7
    DC_PKT_BLOCK_DATA_8,             //!< Block data transfer, offset 8
    DC_PKT_BLOCK_DATA_9,             //!< Block data transfer, offset 9
    DC_PKT_BLOCK_DATA_10,            //!< Block data transfer, offset 10
    DC_PKT_BLOCK_DATA_11,            //!< Block data transfer, offset 11
    DC_PKT_BLOCK_DATA_12,            //!< Block data transfer, offset 12
    DC_PKT_BLOCK_DATA_13,            //!< Block data transfer, offset 13
    DC_PKT_BLOCK_DATA_14,            //!< Block data transfer, offset 14
    DC_PKT_BLOCK_DATA_15,            //!< Block data transfer, offset 15
    DC_PKT_BLOCK_DATA_16,            //!< Block data transfer, offset 16
    DC_PKT_BLOCK_DATA_17,            //!< Block data transfer, offset 17
    DC_PKT_BLOCK_DATA_18,            //!< Block data transfer, offset 18
    DC_PKT_BLOCK_DATA_19,            //!< Block data transfer, offset 19
    DC_PKT_BLOCK_DATA_20,            //!< Block data transfer, offset 20
    DC_PKT_BLOCK_DATA_21,            //!< Block data transfer, offset 21
    DC_PKT_BLOCK_DATA_22,            //!< Block data transfer, offset 22
    DC_PKT_BLOCK_DATA_23,            //!< Block data transfer, offset 23
    DC_PKT_BLOCK_DATA_24,            //!< Block data transfer, offset 24
    DC_PKT_BLOCK_DATA_25,            //!< Block data transfer, offset 25
    DC_PKT_BLOCK_DATA_26,            //!< Block data transfer, offset 26
    DC_PKT_BLOCK_DATA_27,            //!< Block data transfer, offset 27
    DC_PKT_BLOCK_DATA_28,            //!< Block data transfer, offset 28
    DC_PKT_BLOCK_DATA_29,            //!< Block data transfer, offset 29
    DC_PKT_BLOCK_DATA_30,            //!< Block data transfer, offset 30
    DC_PKT_BLOCK_DATA_31,            //!< Block data transfer, offset 31
    DC_PKT_BLOCK_DATA_32,            //!< Block data transfer, offset 32
    DC_PKT_BLOCK_DATA_33,            //!< Block data transfer, offset 33
    DC_PKT_BLOCK_DATA_34,            //!< Block data transfer, offset 34
    DC_PKT_BLOCK_DATA_35,            //!< Block data transfer, offset 35
    DC_PKT_BLOCK_DATA_36,            //!< Block data transfer, offset 36
    DC_PKT_BLOCK_DATA_37,            //!< Block data transfer, offset 37
    DC_PKT_BLOCK_DATA_38,            //!< Block data transfer, offset 38
    DC_PKT_BLOCK_DATA_39,            //!< Block data transfer, offset 39
    DC_PKT_BLOCK_DATA_40,            //!< Block data transfer, offset 40
    DC_PKT_BLOCK_DATA_41,            //!< Block data transfer, offset 41
    DC_PKT_BLOCK_DATA_42,            //!< Block data transfer, offset 42
    DC_PKT_BLOCK_DATA_43,            //!< Block data transfer, offset 43
    DC_PKT_BLOCK_DATA_44,            //!< Block data transfer, offset 44
    DC_PKT_BLOCK_DATA_45,            //!< Block data transfer, offset 45
    DC_PKT_BLOCK_DATA_46,            //!< Block data transfer, offset 46
    DC_PKT_BLOCK_DATA_47,            //!< Block data transfer, offset 47
    DC_PKT_BLOCK_DATA_48,            //!< Block data transfer, offset 48
    DC_PKT_BLOCK_DATA_49,            //!< Block data transfer, offset 49
    DC_PKT_BLOCK_DATA_50,            //!< Block data transfer, offset 50
    DC_PKT_BLOCK_DATA_51,            //!< Block data transfer, offset 51
    DC_PKT_BLOCK_DATA_52,            //!< Block data transfer, offset 52
    DC_PKT_BLOCK_DATA_53,            //!< Block data transfer, offset 53
    DC_PKT_BLOCK_DATA_54,            //!< Block data transfer, offset 54
    DC_PKT_BLOCK_DATA_55,            //!< Block data transfer, offset 55
    DC_PKT_BLOCK_DATA_56,            //!< Block data transfer, offset 56
    DC_PKT_BLOCK_DATA_57,            //!< Block data transfer, offset 57
    DC_PKT_BLOCK_DATA_58,            //!< Block data transfer, offset 58
    DC_PKT_BLOCK_DATA_59,            //!< Block data transfer, offset 59
    DC_PKT_BLOCK_DATA_60,            //!< Block data transfer, offset 60
    DC_PKT_BLOCK_DATA_61,            //!< Block data transfer, offset 61
    DC_PKT_BLOCK_DATA_62,            //!< Block data transfer, offset 62
    DC_PKT_BLOCK_DATA_63,            //!< Block data transfer, offset 63
    DC_PKT_BLOCK_START = 0x50,       //!< Start block data transfer
    DC_PKT_BLOCK_ENDPOINT_INFO = 0x60 //!< Block data endpoint information
} DroneCAN_BlockDataMessages;


// The prototypes below provide an interface to the packets.
// They are not auto-generated functions, but must be hand-written

//! \return the packet data pointer from the packet
uint8_t* getDC_BlockPacketData(DC_Packet_t* pkt);

//! \return the packet data pointer from the packet, const
const uint8_t* getDC_BlockPacketDataConst(const DC_Packet_t* pkt);

//! Complete a packet after the data have been encoded
void finishDC_BlockPacket(DC_Packet_t* pkt, int size, uint32_t packetID);

//! \return the size of a packet from the packet header
int getDC_BlockPacketSize(const DC_Packet_t* pkt);

//! \return the ID of a packet from the packet header
uint32_t getDC_BlockPacketID(const DC_Packet_t* pkt);

#ifdef __cplusplus
}
#endif
#endif
