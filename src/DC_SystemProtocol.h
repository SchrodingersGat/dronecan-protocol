// DC_SystemProtocol.h was generated by ProtoGen version 2.2.d

#ifndef _DC_SYSTEMPROTOCOL_H
#define _DC_SYSTEMPROTOCOL_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 * \mainpage DC_System protocol stack
 *

 *
 * The protocol API enumeration is incremented anytime the protocol is changed
 * in a way that affects compatibility with earlier versions of the protocol.
 * The protocol enumeration for this version is: 1
 *
 * The protocol version is 1.0
 */

#include <stdint.h>
#include "drone_can_protocol_glue.h"	// Protocol glue files

//! \return the protocol API enumeration
#define getDC_SystemApi() 1

//! \return the protocol version string
#define getDC_SystemVersion() "1.0"
typedef enum
{
    DC_PKT_SYS_INFO = 0x20,          //!< Device information
    DC_PKT_SYS_ID,                   //!< Device identification
    DC_PKT_SYS_FW_VERSION,           //!< Device firmware version
    DC_PKT_SYS_FW_DATE,              //!< Device revision date
    DC_PKT_SYS_FW_DESC,              //!< Device firmware description string
    DC_PKT_SYS_SETTINGS_CHK,         //!< Settings checksum information
    DC_PKT_SYS_CPU_INFO,             //!< Processor information
    DC_PKT_SYS_CMD = 0x50,           //!< Issue a device-specific command
    DC_PKT_SYS_RESET,                //!< Reset the device
    DC_PKT_SYS_ASSIGN_NODE_ID = 0x80,//!< Set device node ID
    DC_PKT_SYS_ENTER_BOOTLOADER = 0xB0 
} DroneCAN_SystemMessages;


// The prototypes below provide an interface to the packets.
// They are not auto-generated functions, but must be hand-written

//! \return the packet data pointer from the packet
uint8_t* getDC_SystemPacketData(DC_Packet_t* pkt);

//! \return the packet data pointer from the packet, const
const uint8_t* getDC_SystemPacketDataConst(const DC_Packet_t* pkt);

//! Complete a packet after the data have been encoded
void finishDC_SystemPacket(DC_Packet_t* pkt, int size, uint32_t packetID);

//! \return the size of a packet from the packet header
int getDC_SystemPacketSize(const DC_Packet_t* pkt);

//! \return the ID of a packet from the packet header
uint32_t getDC_SystemPacketID(const DC_Packet_t* pkt);

#ifdef __cplusplus
}
#endif
#endif
