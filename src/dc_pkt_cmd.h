// dc_pkt_cmd.h was generated by ProtoGen version 2.3.b

/*
 * This program source code file is part of DroneCAN protocol specification
 *
 * Website: www.dronecan.org
 * GitHub: www.github.com/dronecan
 *
 * Copyright (C) 2017 Currawong Engineering Pty Ltd, see AUTHORS.txt for contributors.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, you may find one here:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * or you may search the http://www.gnu.org website for the version 2 license,
 * or you may write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

#ifndef _DC_PKT_CMD_H
#define _DC_PKT_CMD_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 *
 * Raw actuator command
 */

#include "DC_CommandProtocol.h"

//! Create the DC_Cmd_RawCommand packet
void encodeDC_Cmd_RawCommandPacket(DC_Packet_t* pkt, int16_t value);

//! Decode the DC_Cmd_RawCommand packet
int decodeDC_Cmd_RawCommandPacket(const DC_Packet_t* pkt, int16_t* value);

//! return the packet ID for the DC_Cmd_RawCommand packet
#define getDC_Cmd_RawCommandPacketID() (DC_PKT_CMD_RAW_VALUE)

//! return the minimum encoded length for the DC_Cmd_RawCommand packet
#define getDC_Cmd_RawCommandMinDataLength() (2)

//! return the maximum encoded length for the DC_Cmd_RawCommand packet
#define getDC_Cmd_RawCommandMaxDataLength() (2)

//! Create the DC_Cmd_PWMCommand packet
void encodeDC_Cmd_PWMCommandPacket(DC_Packet_t* pkt, uint16_t pwm);

//! Decode the DC_Cmd_PWMCommand packet
int decodeDC_Cmd_PWMCommandPacket(const DC_Packet_t* pkt, uint16_t* pwm);

//! return the packet ID for the DC_Cmd_PWMCommand packet
#define getDC_Cmd_PWMCommandPacketID() (DC_PKT_CMD_TARGET_PWM)

//! return the minimum encoded length for the DC_Cmd_PWMCommand packet
#define getDC_Cmd_PWMCommandMinDataLength() (2)

//! return the maximum encoded length for the DC_Cmd_PWMCommand packet
#define getDC_Cmd_PWMCommandMaxDataLength() (2)

//! Create the DC_Cmd_ThrottleCommand packet
void encodeDC_Cmd_ThrottleCommandPacket(DC_Packet_t* pkt, uint16_t throttle);

//! Decode the DC_Cmd_ThrottleCommand packet
int decodeDC_Cmd_ThrottleCommandPacket(const DC_Packet_t* pkt, uint16_t* throttle);

//! return the packet ID for the DC_Cmd_ThrottleCommand packet
#define getDC_Cmd_ThrottleCommandPacketID() (DC_PKT_CMD_THROTTLE)

//! return the minimum encoded length for the DC_Cmd_ThrottleCommand packet
#define getDC_Cmd_ThrottleCommandMinDataLength() (2)

//! return the maximum encoded length for the DC_Cmd_ThrottleCommand packet
#define getDC_Cmd_ThrottleCommandMaxDataLength() (2)

#ifdef __cplusplus
}
#endif
#endif
